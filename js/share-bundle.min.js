/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 79);
/******/ })
/************************************************************************/
/******/ ({

/***/ 56:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
// --------------------------------------------------
//   Font 関数
// --------------------------------------------------


/**
 * Google Fonts を表示する
 * @param {array} importFontsArr 表示する Google Fonts の配列
 * @param {string} id            スタイルシートに設定する ID名
 */
var setGoogleFonts = exports.setGoogleFonts = function setGoogleFonts(importFontsArr, id) {

  if (importFontsArr.length > 0) {

    var fonts = importFontsArr.join('|');
    var elementGoogleFonts = document.querySelector('#' + id);

    // --------------------------------------------------
    //   すでにスタイルシートが存在する場合
    // --------------------------------------------------

    if (elementGoogleFonts) {

      var href = elementGoogleFonts.getAttribute('href');
      var already = href.replace('https://fonts.googleapis.com/css?family=', '');

      // すでにフォントがある場合は追加分と合成して表示する
      if (already) {

        var alreadyArr = already.split('|');
        var mergedArr = importFontsArr.concat(alreadyArr);

        // 重複削除
        var fontsArr = mergedArr.filter(function (x, i, self) {
          return self.indexOf(x) === i;
        });

        fonts = fontsArr.join('|');
        // console.log('alreadyArr = ', alreadyArr);
        // console.log('mergedArr = ', mergedArr);
        // console.log('fontsArr = ', fontsArr);
        // console.log('fonts = ', fonts);
      }

      elementGoogleFonts.href = 'https://fonts.googleapis.com/css?family=' + fonts;

      // --------------------------------------------------
      //   新規にスタイルシートを追加する
      // --------------------------------------------------
    } else {

      var css = document.createElement('link');
      css.type = 'text/css';
      css.rel = 'stylesheet';
      css.id = id;
      css.href = 'https://fonts.googleapis.com/css?family=' + fonts;
      document.getElementsByTagName('head').item(0).appendChild(css);
    }

    // console.log('fonts = ', fonts);
  }
};

exports.default = setGoogleFonts;

/***/ }),

/***/ 79:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GameUsersShareButtons = exports.PLUGIN_URL = exports.GameUsersShareButtonsCommon = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // --------------------------------------------------
//   Import
// --------------------------------------------------

var _font = __webpack_require__(56);

var _font2 = _interopRequireDefault(_font);

var _device = __webpack_require__(80);

var _device2 = _interopRequireDefault(_device);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var GameUsersShareButtonsCommon = exports.GameUsersShareButtonsCommon = function () {
  function GameUsersShareButtonsCommon() {
    _classCallCheck(this, GameUsersShareButtonsCommon);
  }

  _createClass(GameUsersShareButtonsCommon, null, [{
    key: 'escapeHtml',
    value: function escapeHtml(value) {
      if (typeof value !== 'string') {
        return value;
      }
      return value.replace(/[&'`"<>]/g, function (match) {
        var string = {
          '&': '&amp;',
          "'": '&#x27;',
          '`': '&#x60;',
          '"': '&quot;',
          '<': '&lt;',
          '>': '&gt;'
        }[match];
        return string;
      });
    }
  }]);

  return GameUsersShareButtonsCommon;
}();

var PLUGIN_URL = exports.PLUGIN_URL = function () {

  var src = null;
  if (document.currentScript) {
    src = document.currentScript.src;
  } else {
    var scripts = document.getElementsByTagName('script');
    var script = scripts[scripts.length - 1];
    if (script.src) {
      src = script.src;
    }
  }
  var directoryName = 'game-users-share-buttons';
  var scrArr = src.split(directoryName);

  return GameUsersShareButtonsCommon.escapeHtml('' + scrArr[0] + directoryName + '/');
}();

var GameUsersShareButtons = exports.GameUsersShareButtons = function () {
  function GameUsersShareButtons() {
    _classCallCheck(this, GameUsersShareButtons);

    this.deviceAndOsObj = (0, _device2.default)();
    // console.log('this.deviceAndOsObj = ', this.deviceAndOsObj);

    this.gameUsersShareButtonsWebUrl = 'https://gameusers.org/app/share-buttons';
    this.gameUsersShareButtonsFreeImageAlt = 'Game Users Share Buttons';

    this.countObj = {};
    this.importGoogleFontsArr = [];

    this.shareObj = {
      twitter: 'Twitter',
      facebook: 'Facebook',
      'google-plus': 'Google+',
      pocket: 'Pocket',
      pinterest: 'Pinterest',
      linkedin: 'LinkedIn',
      tumblr: 'Tumblr',
      hatena: 'Hatena',
      line: 'Line',
      feedly: 'Feedly',
      rss: 'RSS',
      mail: 'Mail'
    };

    this.optionJsonObj = {};

    this.jsonObj = {};
    this.code = '';
    this.className = '';

    this.shareButtonsBaseUrl = PLUGIN_URL;
    this.shareButtonsFreeImageBaseUrl = this.shareButtonsBaseUrl + 'img/';

    this.containerSelector = '';

    if (document.getElementById('game-users-share-buttons-official')) {
      this.containerSelector = '#game-users-share-buttons-official ';
    }
  }

  _createClass(GameUsersShareButtons, [{
    key: 'setJsonObj',
    value: function setJsonObj(value) {
      this.jsonObj = value;
    }
  }, {
    key: 'setOptionJsonObj',
    value: function setOptionJsonObj(value) {
      this.optionJsonObj = value;
    }
  }, {
    key: 'shareButtons',
    value: function shareButtons() {

      this.code = '';

      var themeName = GameUsersShareButtonsCommon.escapeHtml(this.jsonObj.name);
      var themeId = GameUsersShareButtonsCommon.escapeHtml(this.jsonObj.id);
      this.className = 'game-users-share-buttons-' + themeName + '-' + themeId;

      if (this.jsonObj.style.type === 1 && this.jsonObj.style.version === 1) {
        this.styleType1Ver1();
      } else if (this.jsonObj.style.type === 2 && this.jsonObj.style.version === 1) {
        this.styleType2Ver1();
      }

      if (this.jsonObj.theme.type === 1 && this.jsonObj.theme.version === 1) {
        this.themeType1Ver1();
      } else if (this.jsonObj.theme.type === 2 && this.jsonObj.theme.version === 1) {
        this.themeType2Ver1();
      }

      return this.code;
    }
  }, {
    key: 'styleType1Ver1',
    value: function styleType1Ver1() {

      // --------------------------------------------------
      //   Margin
      // --------------------------------------------------

      var marginTop = GameUsersShareButtons.styleAddPx(this.jsonObj.marginTop);
      var marginRight = GameUsersShareButtons.styleAddPx(this.jsonObj.marginRight);
      var marginBottom = GameUsersShareButtons.styleAddPx(this.jsonObj.marginBottom);
      var marginLeft = GameUsersShareButtons.styleAddPx(this.jsonObj.marginLeft);

      // --------------------------------------------------
      //   Share Image
      // --------------------------------------------------

      var shareImageWidth = GameUsersShareButtons.styleAddPxPlus(this.jsonObj.shareImageWidth, 'width');
      var shareImageHeight = GameUsersShareButtons.styleAddPxPlus(this.jsonObj.shareImageHeight, 'height');
      var shareImageVerticalAlign = GameUsersShareButtons.styleVerticalAlign(this.jsonObj.shareImageVerticalAlign);
      var shareImageMarginTop = GameUsersShareButtons.styleAddPx(this.jsonObj.shareImageMarginTop);
      var shareImageMarginRight = GameUsersShareButtons.styleAddPx(this.jsonObj.shareImageMarginRight);
      var shareImageMarginBottom = GameUsersShareButtons.styleAddPx(this.jsonObj.shareImageMarginBottom);
      var shareImageMarginLeft = GameUsersShareButtons.styleAddPx(this.jsonObj.shareImageMarginLeft);

      // --------------------------------------------------
      //   Count
      // --------------------------------------------------

      var countDirection = GameUsersShareButtonsCommon.escapeHtml(this.jsonObj.countDirection);
      var countWidth = GameUsersShareButtons.styleAddPxPlus(this.jsonObj.countWidth, 'width');
      var countHeight = GameUsersShareButtons.styleAddPxPlus(this.jsonObj.countHeight, 'height');
      var countVerticalAlign = GameUsersShareButtons.styleVerticalAlign(this.jsonObj.countVerticalAlign);
      var countMarginTop = GameUsersShareButtons.styleAddPx(this.jsonObj.countMarginTop);
      var countMarginRight = GameUsersShareButtons.styleAddPx(this.jsonObj.countMarginRight);
      var countMarginBottom = GameUsersShareButtons.styleAddPx(this.jsonObj.countMarginBottom);
      var countMarginLeft = GameUsersShareButtons.styleAddPx(this.jsonObj.countMarginLeft);

      var adjustmentTop = 0;
      var adjustmentRight = 0;
      var adjustmentBottom = 0;
      var adjustmentLeft = 0;

      // this.deviceAndOsObj.device = 'smartphone';
      // this.deviceAndOsObj.os = 'Android';

      if (this.deviceAndOsObj.device !== 'other' && this.deviceAndOsObj.os === 'iOS') {

        adjustmentTop = this.jsonObj.countPaddingTopForIos || 0;
        adjustmentRight = this.jsonObj.countPaddingRightForIos || 0;
        adjustmentBottom = this.jsonObj.countPaddingBottomForIos || 0;
        adjustmentLeft = this.jsonObj.countPaddingLeftForIos || 0;
      } else if (this.deviceAndOsObj.device !== 'other' && this.deviceAndOsObj.os === 'Android') {

        adjustmentTop = this.jsonObj.countPaddingTopForAndroid || 0;
        adjustmentRight = this.jsonObj.countPaddingRightForAndroid || 0;
        adjustmentBottom = this.jsonObj.countPaddingBottomForAndroid || 0;
        adjustmentLeft = this.jsonObj.countPaddingLeftForAndroid || 0;
      }
      // console.log('adjustmentTop = ', adjustmentTop);

      var countPaddingTop = GameUsersShareButtons.styleAddPx(this.jsonObj.countPaddingTop + adjustmentTop);
      var countPaddingRight = GameUsersShareButtons.styleAddPx(this.jsonObj.countPaddingRight + adjustmentRight);
      var countPaddingBottom = GameUsersShareButtons.styleAddPx(this.jsonObj.countPaddingBottom + adjustmentBottom);
      var countPaddingLeft = GameUsersShareButtons.styleAddPx(this.jsonObj.countPaddingLeft + adjustmentLeft);

      var countColor = GameUsersShareButtonsCommon.escapeHtml(this.jsonObj.countColor);
      var countBorderColor = GameUsersShareButtonsCommon.escapeHtml(this.jsonObj.countBorderColor);
      var countBorderRadius = GameUsersShareButtons.styleAddPx(this.jsonObj.countBorderRadius);

      var countFontColor = GameUsersShareButtonsCommon.escapeHtml(this.jsonObj.countFontColor);

      // Count GoogleFont
      var countFont = '';

      if (this.jsonObj.countGoogleFont) {
        var replacedStr = GameUsersShareButtonsCommon.escapeHtml(this.jsonObj.countGoogleFont.replace(/ /, '+'));

        if (this.importGoogleFontsArr.indexOf(replacedStr) === -1) {
          this.importGoogleFontsArr.push(replacedStr);
        }

        countFont += '\'' + GameUsersShareButtonsCommon.escapeHtml(this.jsonObj.countGoogleFont) + '\', ';
      }

      if (this.jsonObj.countFont) {
        countFont += '\'' + GameUsersShareButtonsCommon.escapeHtml(this.jsonObj.countFont) + '\', ';
      }

      countFont += 'cursive';
      var countFontSize = GameUsersShareButtons.styleAddPx(this.jsonObj.countFontSize);
      var countFontStyle = GameUsersShareButtonsCommon.escapeHtml(this.jsonObj.countFontStyle);
      var countFontWeight = GameUsersShareButtonsCommon.escapeHtml(this.jsonObj.countFontWeight);

      // --------------------------------------------------
      //   Free Image
      // --------------------------------------------------

      var freeImageVerticalAlign = '';
      var freeImageWidth = '';
      var freeImageHeight = '';
      var freeImageMarginTop = '';
      var freeImageMarginRight = '';
      var freeImageMarginBottom = '';
      var freeImageMarginLeft = '';

      if (this.jsonObj.freeUploadImage) {
        freeImageVerticalAlign = GameUsersShareButtons.styleVerticalAlign(this.jsonObj.freeUploadImageVerticalAlign);
        freeImageWidth = GameUsersShareButtons.styleAddPxPlus(this.jsonObj.freeUploadImageWidth, 'width');
        freeImageHeight = GameUsersShareButtons.styleAddPxPlus(this.jsonObj.freeUploadImageHeight, 'height');
        freeImageMarginTop = GameUsersShareButtons.styleAddPx(this.jsonObj.freeUploadImageMarginTop);
        freeImageMarginRight = GameUsersShareButtons.styleAddPx(this.jsonObj.freeUploadImageMarginRight);
        freeImageMarginBottom = GameUsersShareButtons.styleAddPx(this.jsonObj.freeUploadImageMarginBottom);
        freeImageMarginLeft = GameUsersShareButtons.styleAddPx(this.jsonObj.freeUploadImageMarginLeft);
      } else {
        freeImageVerticalAlign = GameUsersShareButtons.styleVerticalAlign(this.jsonObj.freeImageVerticalAlign);
        freeImageWidth = GameUsersShareButtons.styleAddPxPlus(this.jsonObj.freeImageWidth, 'width');
        freeImageHeight = GameUsersShareButtons.styleAddPxPlus(this.jsonObj.freeImageHeight, 'height');
        freeImageMarginTop = GameUsersShareButtons.styleAddPx(this.jsonObj.freeImageMarginTop);
        freeImageMarginRight = GameUsersShareButtons.styleAddPx(this.jsonObj.freeImageMarginRight);
        freeImageMarginBottom = GameUsersShareButtons.styleAddPx(this.jsonObj.freeImageMarginBottom);
        freeImageMarginLeft = GameUsersShareButtons.styleAddPx(this.jsonObj.freeImageMarginLeft);
      }

      // --------------------------------------------------
      //   Box Margin
      // --------------------------------------------------

      var boxMarginTop = GameUsersShareButtons.styleAddPx(this.jsonObj.boxMarginTop);
      var boxMarginRight = GameUsersShareButtons.styleAddPx(this.jsonObj.boxMarginRight);
      var boxMarginBottom = GameUsersShareButtons.styleAddPx(this.jsonObj.boxMarginBottom);
      var boxMarginLeft = GameUsersShareButtons.styleAddPx(this.jsonObj.boxMarginLeft);

      var boxFlexFlow = '';

      if (countDirection === 'top' || countDirection === 'bottom') {

        boxFlexFlow += '-webkit-box-orient: vertical;';
        boxFlexFlow += '-webkit-box-direction: normal;';
        boxFlexFlow += '-ms-flex-flow: column nowrap;';
        boxFlexFlow += 'flex-flow: column nowrap;';
      } else {

        boxFlexFlow += '-webkit-box-orient: horizontal;';
        boxFlexFlow += '-webkit-box-direction: normal;';
        boxFlexFlow += '-ms-flex-flow: row nowrap;';
        boxFlexFlow += 'flex-flow: row nowrap;';
      }

      // --------------------------------------------------
      //   Code
      // --------------------------------------------------

      this.code += '<style type="text/css">';

      this.code += '.' + this.className + ' {';
      this.code += '  display: -webkit-box;';
      this.code += '  display: -ms-flexbox;';
      this.code += '  display: flex;';
      this.code += '  -webkit-box-orient: horizontal;';
      this.code += '  -webkit-box-direction: normal;';
      this.code += '  -ms-flex-flow: row wrap;';
      this.code += '  flex-flow: row wrap;';
      this.code += '  margin: ' + marginTop + ' ' + marginRight + ' ' + marginBottom + ' ' + marginLeft + ';';
      this.code += '  padding: 0;';
      this.code += '  border: 0;';
      this.code += '  font-size: 100%;';
      this.code += '  font: inherit;';
      this.code += '  line-height: 1;';
      // this.code += '  vertical-align: baseline;';
      // this.code += '  vertical-align: top;';
      this.code += '}';

      this.code += '.' + this.className + '-free {';
      this.code += '  display: -webkit-box;';
      this.code += '  display: -ms-flexbox;';
      this.code += '  display: flex;';
      this.code += '  ' + freeImageVerticalAlign;
      this.code += '}';

      this.code += '.' + this.className + '-free a, .' + this.className + '-free a:hover, .' + this.className + '-free a:focus {';
      this.code += '  -webkit-box-shadow: none;';
      this.code += '  box-shadow: none;';
      this.code += '  outline: none;';
      this.code += '}';

      this.code += '.' + this.className + '-free img, .' + this.className + '-free a img {';
      this.code += '  -webkit-box-shadow: none;';
      this.code += '  box-shadow: none;';
      this.code += '  ' + freeImageWidth;
      this.code += '  ' + freeImageHeight;
      this.code += '  margin: ' + freeImageMarginTop + ' ' + freeImageMarginRight + ' ' + freeImageMarginBottom + ' ' + freeImageMarginLeft + ';';
      this.code += '  vertical-align: top;';
      this.code += '}';

      this.code += '.' + this.className + '-box {';
      this.code += '  display: -webkit-box;';
      this.code += '  display: -ms-flexbox;';
      this.code += '  display: flex;';
      this.code += '  ' + boxFlexFlow;
      this.code += '  margin: ' + boxMarginTop + ' ' + boxMarginRight + ' ' + boxMarginBottom + ' ' + boxMarginLeft + ';';
      this.code += '  cursor: pointer;';
      this.code += '}';

      this.code += '.' + this.className + '-box-image {';
      this.code += '  display: -webkit-box;';
      this.code += '  display: -ms-flexbox;';
      this.code += '  display: flex;';
      this.code += '  -webkit-box-pack: center;';
      this.code += '  -ms-flex-pack: center;';
      this.code += '  justify-content: center;';
      this.code += '  ' + shareImageVerticalAlign;
      this.code += '  margin: ' + shareImageMarginTop + ' ' + shareImageMarginRight + ' ' + shareImageMarginBottom + ' ' + shareImageMarginLeft + ';';
      this.code += '}';

      this.code += '.' + this.className + '-box-image a, .' + this.className + '-box-image a:hover, .' + this.className + '-box-image a:focus, .' + this.className + '-box-count a, .' + this.className + '-box-count a:hover, .' + this.className + '-box-count a:focus {';
      this.code += '  -webkit-box-shadow: none;';
      this.code += '  box-shadow: none;';
      this.code += '  outline: none;';
      this.code += '}';

      this.code += '.' + this.className + '-box-image img, .' + this.className + '-box-image a img {';
      this.code += '  -webkit-box-shadow: none;';
      this.code += '  box-shadow: none;';
      this.code += '  ' + shareImageWidth;
      this.code += '  ' + shareImageHeight;
      this.code += '  vertical-align: top;';
      // this.code += '  vertical-align: baseline;';
      this.code += '}';

      this.code += '.' + this.className + '-box-count {';
      // this.code += '  line-height: 1;';
      this.code += '  display: -webkit-box;';
      this.code += '  display: -ms-flexbox;';
      this.code += '  display: flex;';
      this.code += '  -webkit-box-pack: center;';
      this.code += '  -ms-flex-pack: center;';
      this.code += '  justify-content: center;';
      this.code += '  ' + countVerticalAlign;
      this.code += '  border-radius: ' + countBorderRadius + ';';
      this.code += '  margin: ' + countMarginTop + ' ' + countMarginRight + ' ' + countMarginBottom + ' ' + countMarginLeft + ';';
      this.code += '  background-color: ' + countColor + ';';
      this.code += '}';

      this.code += '.' + this.className + '-box-count a {';
      this.code += '  text-decoration: none;';
      this.code += '}';

      this.code += '.' + this.className + '-box-count-' + countDirection + ' {';
      this.code += '  position: relative;';
      this.code += '  -webkit-box-sizing: border-box;';
      this.code += '  box-sizing: border-box;';
      this.code += '  border: 1px solid ' + countBorderColor + ';';
      this.code += '  border-radius: ' + countBorderRadius + ';';
      this.code += '  display: -webkit-box;';
      this.code += '  display: -ms-flexbox;';
      this.code += '  display: flex;';
      this.code += '  -webkit-box-pack: center;';
      this.code += '  -ms-flex-pack: center;';
      this.code += '  justify-content: center;';
      this.code += '  -webkit-box-align: center;';
      this.code += '  -ms-flex-align: center;';
      this.code += '  align-items: center;';
      this.code += '  color: ' + countFontColor + ';';
      this.code += '  font-size: ' + countFontSize + ';';
      this.code += '  font-style: ' + countFontStyle + ';';
      this.code += '  font-weight: ' + countFontWeight + ';';
      this.code += '  font-family: ' + countFont + ';';
      this.code += '  ' + countWidth;
      this.code += '  ' + countHeight;
      this.code += '  padding: ' + countPaddingTop + ' ' + countPaddingRight + ' ' + countPaddingBottom + ' ' + countPaddingLeft + ';';
      this.code += '}';

      if (countDirection === 'top') {

        this.code += '.' + this.className + '-box-count-top::after {';
        this.code += '  content: \'\';';
        this.code += '  position: absolute;';
        this.code += '  bottom: -13px;';
        this.code += '  left: 50%;';
        this.code += '  margin-left: -6px;';
        this.code += '  border: 6px solid transparent;';
        this.code += '  border-top: 6px solid ' + countBorderColor + ';';
        this.code += '}';

        this.code += '.' + this.className + '-box-count-top::before {';
        this.code += '  content: \'\';';
        this.code += '  position: absolute;';
        this.code += '  bottom: -11px;';
        this.code += '  left: 50%;';
        this.code += '  margin-left: -6px;';
        this.code += '  border: 6px solid transparent;';
        this.code += '  border-top: 6px solid ' + countColor + ';';
        this.code += '  z-index: 1;';
        this.code += '}';
      } else if (countDirection === 'right') {

        this.code += '.' + this.className + '-box-count-right::after {';
        this.code += '  content: \'\';';
        this.code += '  position: absolute;';
        this.code += '  left: -13px;';
        this.code += '  top: 50%;';
        this.code += '  margin-top: -6px;';
        this.code += '  border: 6px solid transparent;';
        this.code += '  border-right: 6px solid ' + countBorderColor + ';';
        this.code += '}';

        this.code += '.' + this.className + '-box-count-right::before {';
        this.code += '  content: \'\';';
        this.code += '  position: absolute;';
        this.code += '  left: -11px;';
        this.code += '  top: 50%;';
        this.code += '  margin-top: -6px;';
        this.code += '  border: 6px solid transparent;';
        this.code += '  border-right: 6px solid ' + countColor + ';';
        this.code += '  z-index: 1;';
        this.code += '}';
      } else if (countDirection === 'bottom') {

        this.code += '.' + this.className + '-box-count-bottom::after {';
        this.code += '  content: \'\';';
        this.code += '  position: absolute;';
        this.code += '  top: -13px;';
        this.code += '  left: 50%;';
        this.code += '  margin-left: -6px;';
        this.code += '  border: 6px solid transparent;';
        this.code += '  border-bottom: 6px solid ' + countBorderColor + ';';
        this.code += '}';

        this.code += '.' + this.className + '-box-count-bottom::before {';
        this.code += '  content: \'\';';
        this.code += '  position: absolute;';
        this.code += '  top: -11px;';
        this.code += '  left: 50%;';
        this.code += '  margin-left: -6px;';
        this.code += '  border: 6px solid transparent;';
        this.code += '  border-bottom: 6px solid ' + countColor + ';';
        this.code += '  z-index: 1;';
        this.code += '}';
      } else if (countDirection === 'left') {

        this.code += '.' + this.className + '-box-count-left::after {';
        this.code += '  content: \'\';';
        this.code += '  position: absolute;';
        this.code += '  right: -13px;';
        this.code += '  top: 50%;';
        this.code += '  margin-top: -6px;';
        this.code += '  border: 6px solid transparent;';
        this.code += '  border-left: 6px solid ' + countBorderColor + ';';
        this.code += '}';

        this.code += '.' + this.className + '-box-count-left::before {';
        this.code += '  content: \'\';';
        this.code += '  position: absolute;';
        this.code += '  right: -11px;';
        this.code += '  top: 50%;';
        this.code += '  margin-top: -6px;';
        this.code += '  border: 6px solid transparent;';
        this.code += '  border-left: 6px solid ' + countColor + ';';
        this.code += '  z-index: 1;';
        this.code += '}';
      }

      this.code += '</style>';
    }
  }, {
    key: 'styleType2Ver1',
    value: function styleType2Ver1() {

      // --------------------------------------------------
      //   Margin
      // --------------------------------------------------

      var marginTop = GameUsersShareButtons.styleAddPx(this.jsonObj.marginTop);
      var marginRight = GameUsersShareButtons.styleAddPx(this.jsonObj.marginRight);
      var marginBottom = GameUsersShareButtons.styleAddPx(this.jsonObj.marginBottom);
      var marginLeft = GameUsersShareButtons.styleAddPx(this.jsonObj.marginLeft);

      // --------------------------------------------------
      //   Box Margin
      // --------------------------------------------------

      var boxMarginTop = GameUsersShareButtons.styleAddPx(this.jsonObj.boxMarginTop);
      var boxMarginRight = GameUsersShareButtons.styleAddPx(this.jsonObj.boxMarginRight);
      var boxMarginBottom = GameUsersShareButtons.styleAddPx(this.jsonObj.boxMarginBottom);
      var boxMarginLeft = GameUsersShareButtons.styleAddPx(this.jsonObj.boxMarginLeft);

      // --------------------------------------------------
      //   Share Image
      // --------------------------------------------------

      var shareImageWidth = GameUsersShareButtons.styleAddPxPlus(this.jsonObj.shareImageWidth, 'width');
      var shareImageHeight = GameUsersShareButtons.styleAddPxPlus(this.jsonObj.shareImageHeight, 'height');

      // --------------------------------------------------
      //   Count
      // --------------------------------------------------

      var countWidth = GameUsersShareButtons.styleAddPxPlus(this.jsonObj.countWidth, 'width');
      var countTop = GameUsersShareButtons.styleAddPx(this.jsonObj.countTop);
      var countLeft = GameUsersShareButtons.styleAddPx(this.jsonObj.countLeft);
      var countTextAlign = GameUsersShareButtonsCommon.escapeHtml(this.jsonObj.countTextAlign);

      var countFontColor = GameUsersShareButtonsCommon.escapeHtml(this.jsonObj.countFontColor);

      // Count GoogleFont
      var countFont = '';

      if (this.jsonObj.countGoogleFont) {
        var replacedStr = GameUsersShareButtonsCommon.escapeHtml(this.jsonObj.countGoogleFont.replace(/ /, '+'));

        if (this.importGoogleFontsArr.indexOf(replacedStr) === -1) {
          this.importGoogleFontsArr.push(replacedStr);
        }

        countFont += '\'' + GameUsersShareButtonsCommon.escapeHtml(this.jsonObj.countGoogleFont) + '\', ';
      }

      if (this.jsonObj.countFont) {
        countFont += '\'' + GameUsersShareButtonsCommon.escapeHtml(this.jsonObj.countFont) + '\', ';
      }

      countFont += 'cursive';
      var countFontSize = GameUsersShareButtons.styleAddPx(this.jsonObj.countFontSize);
      var countFontStyle = GameUsersShareButtonsCommon.escapeHtml(this.jsonObj.countFontStyle);
      var countFontWeight = GameUsersShareButtonsCommon.escapeHtml(this.jsonObj.countFontWeight);

      var adjustmentTop = 0;
      var adjustmentRight = 0;
      var adjustmentBottom = 0;
      var adjustmentLeft = 0;

      // this.deviceAndOsObj.device = 'smartphone';
      // this.deviceAndOsObj.os = 'Android';

      if (this.deviceAndOsObj.device !== 'other' && this.deviceAndOsObj.os === 'iOS') {

        adjustmentTop = this.jsonObj.countPaddingTopForIos || 0;
        adjustmentRight = this.jsonObj.countPaddingRightForIos || 0;
        adjustmentBottom = this.jsonObj.countPaddingBottomForIos || 0;
        adjustmentLeft = this.jsonObj.countPaddingLeftForIos || 0;
      } else if (this.deviceAndOsObj.device !== 'other' && this.deviceAndOsObj.os === 'Android') {

        adjustmentTop = this.jsonObj.countPaddingTopForAndroid || 0;
        adjustmentRight = this.jsonObj.countPaddingRightForAndroid || 0;
        adjustmentBottom = this.jsonObj.countPaddingBottomForAndroid || 0;
        adjustmentLeft = this.jsonObj.countPaddingLeftForAndroid || 0;
      }
      // console.log('adjustmentTop = ', adjustmentTop);

      var countPaddingTop = GameUsersShareButtons.styleAddPx(adjustmentTop);
      var countPaddingRight = GameUsersShareButtons.styleAddPx(adjustmentRight);
      var countPaddingBottom = GameUsersShareButtons.styleAddPx(adjustmentBottom);
      var countPaddingLeft = GameUsersShareButtons.styleAddPx(adjustmentLeft);

      // --------------------------------------------------
      //   Free Image
      // --------------------------------------------------

      var freeImageVerticalAlign = '';
      var freeImageWidth = '';
      var freeImageHeight = '';
      var freeImageMarginTop = '';
      var freeImageMarginRight = '';
      var freeImageMarginBottom = '';
      var freeImageMarginLeft = '';

      if (this.jsonObj.freeUploadImage) {

        freeImageVerticalAlign = GameUsersShareButtons.styleVerticalAlign(this.jsonObj.freeUploadImageVerticalAlign);
        freeImageWidth = GameUsersShareButtons.styleAddPxPlus(this.jsonObj.freeUploadImageWidth, 'width');
        freeImageHeight = GameUsersShareButtons.styleAddPxPlus(this.jsonObj.freeUploadImageHeight, 'height');
        freeImageMarginTop = GameUsersShareButtons.styleAddPx(this.jsonObj.freeUploadImageMarginTop);
        freeImageMarginRight = GameUsersShareButtons.styleAddPx(this.jsonObj.freeUploadImageMarginRight);
        freeImageMarginBottom = GameUsersShareButtons.styleAddPx(this.jsonObj.freeUploadImageMarginBottom);
        freeImageMarginLeft = GameUsersShareButtons.styleAddPx(this.jsonObj.freeUploadImageMarginLeft);
      } else {

        freeImageVerticalAlign = GameUsersShareButtons.styleVerticalAlign(this.jsonObj.freeImageVerticalAlign);
        freeImageWidth = GameUsersShareButtons.styleAddPxPlus(this.jsonObj.freeImageWidth, 'width');
        freeImageHeight = GameUsersShareButtons.styleAddPxPlus(this.jsonObj.freeImageHeight, 'height');
        freeImageMarginTop = GameUsersShareButtons.styleAddPx(this.jsonObj.freeImageMarginTop);
        freeImageMarginRight = GameUsersShareButtons.styleAddPx(this.jsonObj.freeImageMarginRight);
        freeImageMarginBottom = GameUsersShareButtons.styleAddPx(this.jsonObj.freeImageMarginBottom);
        freeImageMarginLeft = GameUsersShareButtons.styleAddPx(this.jsonObj.freeImageMarginLeft);
      }

      // --------------------------------------------------
      //   Code
      // --------------------------------------------------

      this.code += '<style type="text/css">';

      this.code += '.' + this.className + ' {';
      this.code += '  display: -webkit-box;';
      this.code += '  display: -ms-flexbox;';
      this.code += '  display: flex;';
      this.code += '  -webkit-box-orient: horizontal;';
      this.code += '  -webkit-box-direction: normal;';
      this.code += '  -ms-flex-flow: row wrap;';
      this.code += '  flex-flow: row wrap;';
      this.code += '  margin: ' + marginTop + ' ' + marginRight + ' ' + marginBottom + ' ' + marginLeft + ';';
      this.code += '  line-height: 1;';
      this.code += '}';

      this.code += '.' + this.className + '-box {';
      this.code += '  position: relative;';
      this.code += '  margin: ' + boxMarginTop + ' ' + boxMarginRight + ' ' + boxMarginBottom + ' ' + boxMarginLeft + ';';
      this.code += '  cursor: pointer;';
      this.code += '}';

      this.code += '.' + this.className + '-box a, .' + this.className + '-box a:hover, .' + this.className + '-box a:focus {';
      this.code += '  -webkit-box-shadow: none;';
      this.code += '  box-shadow: none;';
      this.code += '  outline: none;';
      this.code += '}';

      this.code += '.' + this.className + '-box img, .' + this.className + '-box a img {';
      this.code += '  -webkit-box-shadow: none;';
      this.code += '  box-shadow: none;';
      this.code += '  ' + shareImageWidth;
      this.code += '  ' + shareImageHeight;
      this.code += '  vertical-align: top;';
      this.code += '}';

      this.code += '.' + this.className + '-box-count {';
      // this.code += '  line-height: 1;';
      this.code += '  position: absolute;';
      this.code += '  ' + countWidth;
      this.code += '  top: ' + countTop + ';';
      this.code += '  left: ' + countLeft + ';';
      this.code += '  text-align: ' + countTextAlign + ';';
      this.code += '  color: ' + countFontColor + ';';
      this.code += '  font-size: ' + countFontSize + ';';
      this.code += '  font-style: ' + countFontStyle + ';';
      this.code += '  font-weight: ' + countFontWeight + ';';
      this.code += '  font-family: ' + countFont + ';';
      this.code += '  padding: ' + countPaddingTop + ' ' + countPaddingRight + ' ' + countPaddingBottom + ' ' + countPaddingLeft + ';';
      this.code += '}';

      this.code += '.' + this.className + '-free {';
      this.code += '  display: -webkit-box;';
      this.code += '  display: -ms-flexbox;';
      this.code += '  display: flex;';
      this.code += '  ' + freeImageVerticalAlign;
      this.code += '}';

      this.code += '.' + this.className + '-free a, .' + this.className + '-free a:hover, .' + this.className + '-free a:focus {';
      this.code += '  -webkit-box-shadow: none;';
      this.code += '  box-shadow: none;';
      this.code += '  outline: none;';
      this.code += '}';

      this.code += '.' + this.className + '-free img, .' + this.className + '-free a img {';
      this.code += '  -webkit-box-shadow: none;';
      this.code += '  box-shadow: none;';
      this.code += '  ' + freeImageWidth;
      this.code += '  ' + freeImageHeight;
      this.code += '  margin: ' + freeImageMarginTop + ' ' + freeImageMarginRight + ' ' + freeImageMarginBottom + ' ' + freeImageMarginLeft + ';';
      this.code += '  vertical-align: top;';
      this.code += '}';

      this.code += '</style>';
    }
  }, {
    key: 'themeType1Ver1',
    value: function themeType1Ver1(url, uploadImageActive) {
      var _this = this;

      var themeName = GameUsersShareButtonsCommon.escapeHtml(this.jsonObj.name);
      var themeId = GameUsersShareButtonsCommon.escapeHtml(this.jsonObj.id);

      var themeUrl = this.shareButtonsBaseUrl + 'themes';

      if (url) {
        themeUrl = url;
      }

      var queryControlCache = GameUsersShareButtonsCommon.escapeHtml(this.optionJsonObj.queryControlCache) || 10000000;

      this.code += '<div class="' + this.className + '">';

      // --------------------------------------------------
      //   Share Buttons
      // --------------------------------------------------

      Object.keys(this.jsonObj.share).forEach(function (key) {

        var value = _this.jsonObj.share[key];
        var codeCount = '';
        var codeImage = '';

        if (value.button === false) {
          return true;
        }

        var shareName = GameUsersShareButtonsCommon.escapeHtml(key);
        var shareImageExtension = GameUsersShareButtonsCommon.escapeHtml(value.extension);
        var shareImageWidth = GameUsersShareButtonsCommon.escapeHtml(_this.jsonObj.shareImageWidth);
        var shareImageHeight = GameUsersShareButtonsCommon.escapeHtml(_this.jsonObj.shareImageHeight);
        var shareFormalName = GameUsersShareButtonsCommon.escapeHtml(_this.shareObj[key]);
        var shareCount = GameUsersShareButtonsCommon.escapeHtml(value.count);

        _this.code += '<div class="' + _this.className + '-box" id="game-users-share-buttons-' + shareName + '" data-count="' + shareCount + '">';

        if (_this.jsonObj.count) {

          var countDirection = GameUsersShareButtonsCommon.escapeHtml(_this.jsonObj.countDirection);

          var countDefaultText = '';

          if (value.countDefaultText) {
            countDefaultText = GameUsersShareButtonsCommon.escapeHtml(value.countDefaultText);
          }

          var countMin = GameUsersShareButtonsCommon.escapeHtml(value.countMin);
          var countMax = GameUsersShareButtonsCommon.escapeHtml(value.countMax);

          if (key === 'pinterest') {

            codeCount = '<div class="' + _this.className + '-box-count"><a data-pin-do="buttonBookmark" data-pin-custom="true" data-pin-save="false" href="https://www.pinterest.com/pin/create/button/"><div class="' + _this.className + '-box-count-' + countDirection + '" data-min="' + countMin + '" data-max="' + countMax + '">' + countDefaultText + '</div></a></div>';
          } else if (key === 'rss' && _this.optionJsonObj.rssUrl) {

            var rssUrl = GameUsersShareButtonsCommon.escapeHtml(_this.optionJsonObj.rssUrl);

            codeCount = '<div class="' + _this.className + '-box-count"><a href="' + rssUrl + '" target="_blank"><div class="' + _this.className + '-box-count-' + countDirection + '" data-min="' + countMin + '" data-max="' + countMax + '">' + countDefaultText + '</div></a></div>';
          } else {

            codeCount = '<div class="' + _this.className + '-box-count"><div class="' + _this.className + '-box-count-' + countDirection + '" data-min="' + countMin + '" data-max="' + countMax + '">' + countDefaultText + '</div></div>';
          }
        }

        // --------------------------------------------------
        //   Image Src
        //   画像のパスを作成 / アップロードした画像がある場合はそれを表示
        // --------------------------------------------------

        var imageSrc = themeUrl + '/' + themeName + '-' + themeId + '/' + shareName + '.' + shareImageExtension + '?' + queryControlCache;

        if (uploadImageActive && _this.uploadImageMap.getIn([themeName + '-' + themeId, 'type1', shareName, 'src'])) {
          imageSrc = _this.uploadImageMap.getIn([themeName + '-' + themeId, 'type1', shareName, 'src']);
        }

        if (key === 'pinterest') {

          codeImage = '<div class="' + _this.className + '-box-image"><a data-pin-do="buttonBookmark" data-pin-custom="true" data-pin-save="false" href="https://www.pinterest.com/pin/create/button/"><img src="' + imageSrc + '" width="\'' + shareImageWidth + '" height="' + shareImageHeight + '" alt="' + shareFormalName + '" /></a></div>';
        } else if (key === 'rss' && _this.optionJsonObj.rssUrl) {

          var _rssUrl = GameUsersShareButtonsCommon.escapeHtml(_this.optionJsonObj.rssUrl);

          codeImage = '<div class="' + _this.className + '-box-image"><a href="' + _rssUrl + '" target="_blank"><img src="' + imageSrc + '" width="\'' + shareImageWidth + '" height="' + shareImageHeight + '" alt="' + shareFormalName + '" /></a></div>';
        } else {

          // console.log('themeType1Ver1 / this.shareButtonsBaseUrl = ', this.shareButtonsBaseUrl);
          // console.log('themeType1Ver1 / themeUrl = ', themeUrl);
          // console.log('themeType1Ver1 / url = ', url);
          // console.log('themeType1Ver1 / 含む / imageSrc2 = ', imageSrc);
          // console.log('\n');

          codeImage = '<div class="' + _this.className + '-box-image"><img src="' + imageSrc + '" width="\'' + shareImageWidth + '" height="' + shareImageHeight + '" alt="' + shareFormalName + '" /></div>';
        }

        if (_this.jsonObj.countDirection === 'top' || _this.jsonObj.countDirection === 'left') {
          _this.code += codeCount + codeImage;
        } else {
          _this.code += codeImage + codeCount;
        }

        _this.code += '</div>';
      });

      // --------------------------------------------------
      //   Free Image
      // --------------------------------------------------

      if (this.jsonObj.freeImage) {

        var freeImageUrl = '';
        var freeImageAlt = '';
        var freeImageSrc = '';
        var freeImageWidth = '';
        var freeImageHeight = '';

        if (this.jsonObj.freeUploadImage) {

          freeImageUrl = GameUsersShareButtonsCommon.escapeHtml(this.jsonObj.freeUploadImageUrl);
          freeImageAlt = GameUsersShareButtonsCommon.escapeHtml(this.jsonObj.freeUploadImageAlt);

          // --------------------------------------------------
          //   Free Image Src
          //   画像のパスを作成 / アップロードした画像がある場合はそれを表示
          // --------------------------------------------------

          freeImageSrc = themeUrl + '/' + themeName + '-' + themeId + '/free.' + GameUsersShareButtonsCommon.escapeHtml(this.jsonObj.freeUploadImageExtension);

          if (uploadImageActive && this.uploadImageMap.getIn([themeName + '-' + themeId, 'type1', 'freeUploadImage', 'src'])) {
            freeImageSrc = this.uploadImageMap.getIn([themeName + '-' + themeId, 'type1', 'freeUploadImage', 'src']);
          }

          freeImageWidth = GameUsersShareButtonsCommon.escapeHtml(this.jsonObj.freeUploadImageWidth);
          freeImageHeight = GameUsersShareButtonsCommon.escapeHtml(this.jsonObj.freeUploadImageHeight);
        } else {

          freeImageUrl = this.gameUsersShareButtonsWebUrl;
          freeImageAlt = this.gameUsersShareButtonsFreeImageAlt;
          freeImageWidth = GameUsersShareButtonsCommon.escapeHtml(this.jsonObj.freeImageWidth);
          freeImageHeight = GameUsersShareButtonsCommon.escapeHtml(this.jsonObj.freeImageHeight);

          var freeImageType = 1;
          if ('freeImageType' in this.jsonObj) {
            freeImageType = GameUsersShareButtonsCommon.escapeHtml(this.jsonObj.freeImageType);
          }
          freeImageSrc = this.shareButtonsFreeImageBaseUrl + 'free' + freeImageType + '.png?' + queryControlCache;
          // freeImageSrc = `${this.shareButtonsBaseUrl}img/free${freeImageType}.png?${queryControlCache}`;

        }

        this.code += '<div class="' + this.className + '-free" id="game-users-share-buttons-free-image">';

        if (freeImageUrl) {
          this.code += '<a href="' + freeImageUrl + '" target="_blank"><img src="' + freeImageSrc + '" widht="' + freeImageWidth + '" height="' + freeImageHeight + '" alt="' + freeImageAlt + '" /></a>';
        } else {
          this.code += '<img src="' + freeImageSrc + '" widht="' + freeImageWidth + '" height="' + freeImageHeight + '" alt="' + freeImageAlt + '" />';
        }

        this.code += '</div>';
      }

      this.code += '</div>';
    }
  }, {
    key: 'themeType2Ver1',
    value: function themeType2Ver1(url, uploadImageActive) {
      var _this2 = this;

      // console.log('this.shareButtonsBaseUrl = ', this.shareButtonsBaseUrl);
      var themeName = GameUsersShareButtonsCommon.escapeHtml(this.jsonObj.name);
      var themeId = GameUsersShareButtonsCommon.escapeHtml(this.jsonObj.id);

      var themeUrl = this.shareButtonsBaseUrl + 'themes';

      if (url) {
        themeUrl = url;
      }

      // console.log('url = ', url);
      // console.log('uploadImageActive = ', uploadImageActive);
      // console.log('themeName = ', themeName);
      // console.log('themeId = ', themeId);

      var queryControlCache = GameUsersShareButtonsCommon.escapeHtml(this.optionJsonObj.queryControlCache) || 10000000;

      this.code += '<div class="' + this.className + '">';

      // --------------------------------------------------
      //   Share Buttons
      // --------------------------------------------------

      Object.keys(this.jsonObj.share).forEach(function (key) {

        var value = _this2.jsonObj.share[key];

        if (value.button === false) {
          return true;
        }

        var shareName = GameUsersShareButtonsCommon.escapeHtml(key);
        var shareImageExtension = GameUsersShareButtonsCommon.escapeHtml(value.extension);
        var shareImageWidth = GameUsersShareButtonsCommon.escapeHtml(_this2.jsonObj.shareImageWidth);
        var shareImageHeight = GameUsersShareButtonsCommon.escapeHtml(_this2.jsonObj.shareImageHeight);
        var shareFormalName = GameUsersShareButtonsCommon.escapeHtml(_this2.shareObj[key]);
        var shareCount = GameUsersShareButtonsCommon.escapeHtml(value.count);

        _this2.code += '<div class="' + _this2.className + '-box" id="game-users-share-buttons-' + shareName + '" data-count="' + shareCount + '">';

        // --------------------------------------------------
        //   Image Src
        //   画像のパスを作成 / アップロードした画像がある場合はそれを表示
        // --------------------------------------------------

        var imageSrc = themeUrl + '/' + themeName + '-' + themeId + '/' + shareName + '.' + shareImageExtension + '?' + queryControlCache;

        if (uploadImageActive && _this2.uploadImageMap.getIn([themeName + '-' + themeId, 'type2', shareName, 'src'])) {
          imageSrc = _this2.uploadImageMap.getIn([themeName + '-' + themeId, 'type2', shareName, 'src']);
        }
        // console.log('themeUrl = ', themeUrl);
        // console.log('imageSrc = ', imageSrc);


        if (key === 'pinterest') {

          _this2.code += '<a data-pin-do="buttonBookmark" data-pin-custom="true" data-pin-save="false" href="https://www.pinterest.com/pin/create/button/"><img src="' + imageSrc + '" width="\'' + shareImageWidth + '" height="' + shareImageHeight + '" alt="' + shareFormalName + '" /></a>';
        } else if (key === 'rss' && _this2.optionJsonObj.rssUrl) {

          var rssUrl = GameUsersShareButtonsCommon.escapeHtml(_this2.optionJsonObj.rssUrl);

          _this2.code += '<a href="' + rssUrl + '" target="_blank"><img src="' + imageSrc + '" width="\'' + shareImageWidth + '" height="' + shareImageHeight + '" alt="' + shareFormalName + '" /></a>';
        } else {

          _this2.code += '<img src="' + imageSrc + '" width="\'' + shareImageWidth + '" height="' + shareImageHeight + '" alt="' + shareFormalName + '" />';

          // if (imageSrc.indexOf('https://gameusers.org/dev/blog/wp-content/plugins/game-users-share-buttons/') !== -1) {
          //   // console.log('this.shareButtonsBaseUrl = ', this.shareButtonsBaseUrl);
          //   // console.log('themeUrl = ', themeUrl);
          //   // console.log('url = ', url);
          //   // console.log('含む / imageSrc2 = ', imageSrc);
          //   // console.log('\n');
          // } else {
          //   this.code += `<img src="${imageSrc}" width="'${shareImageWidth}" height="${shareImageHeight}" alt="${shareFormalName}" />`;
          // }

        }

        var countDefaultText = '';
        if (value.countDefaultText) {
          countDefaultText = GameUsersShareButtonsCommon.escapeHtml(value.countDefaultText);
        }

        var countMin = GameUsersShareButtonsCommon.escapeHtml(value.countMin);
        var countMax = GameUsersShareButtonsCommon.escapeHtml(value.countMax);
        _this2.code += '<div class="' + _this2.className + '-box-count"><div data-min="' + countMin + '" data-max="' + countMax + '">' + countDefaultText + '</div></div>';

        _this2.code += '</div>';
      });

      // --------------------------------------------------
      //   Free Image
      // --------------------------------------------------

      if (this.jsonObj.freeImage) {

        var freeImageUrl = '';
        var freeImageAlt = '';
        var freeImageSrc = '';
        var freeImageWidth = '';
        var freeImageHeight = '';

        if (this.jsonObj.freeUploadImage) {

          freeImageUrl = GameUsersShareButtonsCommon.escapeHtml(this.jsonObj.freeUploadImageUrl);
          freeImageAlt = GameUsersShareButtonsCommon.escapeHtml(this.jsonObj.freeUploadImageAlt);

          // --------------------------------------------------
          //   Free Image Src
          //   画像のパスを作成 / アップロードした画像がある場合はそれを表示
          // --------------------------------------------------

          freeImageSrc = themeUrl + '/' + themeName + '-' + themeId + '/free.' + GameUsersShareButtonsCommon.escapeHtml(this.jsonObj.freeUploadImageExtension);

          if (uploadImageActive && this.uploadImageMap.getIn([themeName + '-' + themeId, 'type2', 'freeUploadImage', 'src'])) {
            freeImageSrc = this.uploadImageMap.getIn([themeName + '-' + themeId, 'type2', 'freeUploadImage', 'src']);
          }

          freeImageWidth = GameUsersShareButtonsCommon.escapeHtml(this.jsonObj.freeUploadImageWidth);
          freeImageHeight = GameUsersShareButtonsCommon.escapeHtml(this.jsonObj.freeUploadImageHeight);
        } else {

          freeImageUrl = this.gameUsersShareButtonsWebUrl;
          freeImageAlt = this.gameUsersShareButtonsFreeImageAlt;
          freeImageWidth = GameUsersShareButtonsCommon.escapeHtml(this.jsonObj.freeImageWidth);
          freeImageHeight = GameUsersShareButtonsCommon.escapeHtml(this.jsonObj.freeImageHeight);

          var freeImageType = 1;
          if ('freeImageType' in this.jsonObj) {
            freeImageType = GameUsersShareButtonsCommon.escapeHtml(this.jsonObj.freeImageType);
          }
          freeImageSrc = this.shareButtonsFreeImageBaseUrl + 'free' + freeImageType + '.png?' + queryControlCache;
          // freeImageSrc = `${this.shareButtonsBaseUrl}img/free${freeImageType}.png?${queryControlCache}`;

        }

        this.code += '<div class="' + this.className + '-free" id="game-users-share-buttons-free-image">';

        if (freeImageUrl) {
          this.code += '<a href="' + freeImageUrl + '" target="_blank"><img src="' + freeImageSrc + '" widht="' + freeImageWidth + '" height="' + freeImageHeight + '" alt="' + freeImageAlt + '" /></a>';
        } else {
          this.code += '<img src="' + freeImageSrc + '" widht="' + freeImageWidth + '" height="' + freeImageHeight + '" alt="' + freeImageAlt + '" />';
        }

        this.code += '</div>';
      }

      this.code += '</div>';
    }
  }, {
    key: 'renderAllShareButtons',
    value: function renderAllShareButtons() {

      // console.log('renderAllShareButtons()');

      // --------------------------------------------------
      //   Set Variable
      // --------------------------------------------------

      var that = this;
      var cacheDataJsonObj = {};
      var loopCount = 0;

      // --------------------------------------------------
      //   コードを作成するための配列（elementsArr）
      //   data.json を読み込むための配列（themesArr）を作成する
      //
      //   const elementsArr = [...document.querySelectorAll(`${that.containerSelector}#game-users-share-buttons`)];
      //   上記の書き方は NodeList を forEach でループさせると IE とEdghe でエラーが出るため
      //   https://stackoverflow.com/questions/7459704/in-javascript-what-is-the-best-way-to-convert-a-nodelist-to-an-array/7459729#7459729
      // --------------------------------------------------

      var elementsArr = [].concat(_toConsumableArray(document.querySelectorAll(that.containerSelector + '#game-users-share-buttons')));
      var elementsArrCount = elementsArr.length;
      var themesArr = [];

      elementsArr.forEach(function (element) {
        var themeNameId = element.dataset.theme;

        if (themeNameId && themesArr.indexOf(themeNameId) === -1) {
          themesArr.push(themeNameId);
        }
      });

      var themesArrCount = themesArr.length;

      // console.log('elementsArr = ', elementsArr);
      // console.log('elementsArrCount = ', elementsArrCount);
      // console.log('themesArr = ', themesArr);


      /**
       * Render Share Buttons
       */
      function render() {

        // console.log('render()');
        // console.log('cacheDataJsonObj = ', cacheDataJsonObj);

        // --------------------------------------------------
        //   Set Variable
        // --------------------------------------------------

        loopCount = 0;
        var existencePinterest = false;

        // --------------------------------------------------
        //   Loop
        // --------------------------------------------------

        elementsArr.forEach(function (element) {

          // --------------------------------------------------
          //   Loop Count +1
          // --------------------------------------------------

          loopCount += 1;

          // --------------------------------------------------
          //   Get themeNameId
          // --------------------------------------------------

          var themeNameId = element.dataset.theme;
          // console.log('themeNameId = ', themeNameId);

          if (!themeNameId) {
            return;
          }

          // --------------------------------------------------
          //   Set Json Object
          // --------------------------------------------------

          var jsonObj = cacheDataJsonObj[themeNameId];
          that.setJsonObj(jsonObj);

          // console.log('jsonObj = ', jsonObj);


          // --------------------------------------------------
          //   Share Buttons を描画する
          // --------------------------------------------------

          var copyElement = element;
          copyElement.innerHTML = that.shareButtons();

          var elementDivArr = [].concat(_toConsumableArray(element.querySelectorAll('[id^=game-users-share-buttons-]')));

          elementDivArr.forEach(function (elementDiv) {
            var elementCopy = elementDiv;
            var shareId = elementDiv.id.replace(/game-users-share-buttons-/g, '');

            if (elementCopy.dataset.count) {
              that.countObj[shareId] = null;
            }

            if (shareId === 'pinterest') {
              existencePinterest = true;
            }

            elementCopy.onclick = function () {
              that.share(shareId);
            };
          });

          // --------------------------------------------------
          //   ループの最後で行う処理
          // --------------------------------------------------

          if (elementsArrCount === loopCount) {

            // console.log('Render Last loopCount = ', loopCount);

            // --------------------------------------------------
            //   Add Google Fonts Style Sheet
            // --------------------------------------------------

            if (that.importGoogleFontsArr.length > 0) {
              (0, _font2.default)(that.importGoogleFontsArr, 'game-users-share-buttons-google-fonts');
            }

            // --------------------------------------------------
            //   Add Pinterest Script
            // --------------------------------------------------

            var elementPinterestJs = document.querySelector('script[src^="//assets.pinterest.com/js/pinit"]');

            if (existencePinterest && !elementPinterestJs) {

              var script = document.createElement('script');
              script.type = 'text/javascript';
              script.id = 'game-users-share-buttons-pinit-js';
              script.src = '//assets.pinterest.com/js/pinit.js';
              document.getElementsByTagName('head').item(0).appendChild(script);
            }

            // --------------------------------------------------
            //   Count
            // --------------------------------------------------

            that.count();
          }
        });
      }

      // --------------------------------------------------
      //   Get Option JSON
      // --------------------------------------------------

      var xhrOption = new XMLHttpRequest();
      xhrOption.open('GET', this.shareButtonsBaseUrl + 'json/option.json?' + Date.now(), true);
      xhrOption.onload = function () {
        if (xhrOption.readyState === 4 && xhrOption.status === 200) {

          // --------------------------------------------------
          //   Set Option Json Object
          // --------------------------------------------------

          that.setOptionJsonObj(JSON.parse(this.responseText));

          // --------------------------------------------------
          //   クエリを追加してキャッシュを効かなくさせる
          // --------------------------------------------------

          var queryControlCache = GameUsersShareButtonsCommon.escapeHtml(that.optionJsonObj.queryControlCache) || 10000000;

          // --------------------------------------------------
          //   Loop
          // --------------------------------------------------

          themesArr.forEach(function (themeNameId) {

            // --------------------------------------------------
            //   data.json を読み込む
            // --------------------------------------------------

            var xhr = new XMLHttpRequest();
            xhr.open('GET', that.shareButtonsBaseUrl + 'themes/' + themeNameId + '/data.json?' + queryControlCache, true);
            xhr.onload = function () {

              // --------------------------------------------------
              //   Loop Count +1
              // --------------------------------------------------

              loopCount += 1;

              // --------------------------------------------------
              //   cacheDataJsonObj に data.json をセットする
              // --------------------------------------------------

              if (xhr.readyState === 4 && xhr.status === 200) {
                var jsonObj = JSON.parse(this.responseText);
                cacheDataJsonObj[themeNameId] = jsonObj;
              }

              // --------------------------------------------------
              //   ループの最後に達したらシェアボタンを描画する
              // --------------------------------------------------

              if (loopCount === themesArrCount) {
                // console.log('data.json Last loopCount = ', loopCount);
                render();
              }
            };
            xhr.onerror = function () {
              loopCount += 1;
            };
            xhr.send(null);
          });
        }
      };
      xhrOption.send(null);
    }
  }, {
    key: 'share',
    value: function share(type) {

      var title = encodeURIComponent(document.title);
      var url = encodeURIComponent(window.location.href);
      // const url = encodeURIComponent('https://www.google.com/');
      // const url = encodeURIComponent('https://www.yahoo.co.jp/');
      // const url = 'https://gameusers.org/dev/blog/feed';
      var openAddress = null;

      if (type === 'twitter') {
        openAddress = 'https://twitter.com/share?url=' + url + '&text=' + title;
      } else if (type === 'facebook') {
        openAddress = 'https://www.facebook.com/sharer/sharer.php?u=' + url;
      } else if (type === 'google-plus') {
        openAddress = 'https://plus.google.com/share?url=' + url;
      } else if (type === 'pocket') {
        openAddress = 'http://getpocket.com/edit?url=' + url;
      } else if (type === 'linkedin') {
        openAddress = 'https://www.linkedin.com/shareArticle?mini=true&url=' + url;
      } else if (type === 'tumblr') {
        openAddress = 'http://www.tumblr.com/share/link?url=' + url;
      } else if (type === 'hatena') {
        openAddress = 'http://b.hatena.ne.jp/entry/' + url;
      } else if (type === 'line') {
        openAddress = 'http://line.me/R/msg/text/?' + title + '%20' + url;
      } else if (type === 'feedly' && this.optionJsonObj.rssUrl) {
        openAddress = 'http://www.feedly.com/home#subscription/feed/' + this.optionJsonObj.rssUrl;
      } else if (type === 'mail') {
        window.location.href = 'mailto:?subject=' + document.title + '&body=' + window.location.href;
      }

      if (openAddress) {
        window.open(openAddress, '_blank');
      }
    }
  }, {
    key: 'countApply',
    value: function countApply(type) {
      var _this3 = this;

      var elementArr = [].concat(_toConsumableArray(document.querySelectorAll(this.containerSelector + '#game-users-share-buttons-' + type)));

      elementArr.forEach(function (element) {

        var elementCountDiv = element.querySelector('div[class*="-box-count"] div');
        if (!elementCountDiv) {
          return;
        }

        var dataCount = element.dataset.count;
        if (dataCount === 'false') {
          return;
        }

        var count = _this3.countObj[type];

        var countMin = elementCountDiv.dataset.min ? parseInt(elementCountDiv.dataset.min, 10) : null;
        var countMax = elementCountDiv.dataset.max ? parseInt(elementCountDiv.dataset.max, 10) : null;

        if (count === null) {
          return;
        } else if (countMin && countMin > count) {
          return;
        } else if (countMax && countMax < count) {
          count = countMax;
        }

        var copyElement = elementCountDiv;
        copyElement.textContent = count;
      });
    }
  }, {
    key: 'countTwitter',
    value: function countTwitter(url) {

      var type = 'twitter';
      var that = this;

      if (!this.optionJsonObj.twitterApiType) {
        return;
      }

      (function () {

        var apiUrl = 'https://jsoon.digitiminimi.com/twitter/count.json?url="' + encodeURIComponent(url) + '"&callback=gameUsersShareButtonsCallbackTwitter';

        var script = document.createElement('script');
        script.type = 'text/javascript';
        script.src = '' + apiUrl;
        window.gameUsersShareButtonsCallbackTwitter = function (countJsonObj) {

          try {
            if (countJsonObj.count !== null) {
              that.countObj[type] = parseInt(countJsonObj.count, 10);
            } else {
              throw new Error();
            }
          } catch (e) {
            that.countObj[type] = null;
          }

          that.countApply(type);
        };
        document.body.appendChild(script);
      })();
    }
  }, {
    key: 'countFacebook',
    value: function countFacebook(url) {

      var type = 'facebook';
      var that = this;

      var xmlHttpReq = new XMLHttpRequest();
      xmlHttpReq.onreadystatechange = function () {
        if (xmlHttpReq.readyState === 4 && xmlHttpReq.status === 200) {
          var countJsonObj = JSON.parse(this.responseText);

          try {
            if (countJsonObj.share.share_count !== null) {
              that.countObj[type] = parseInt(countJsonObj.share.share_count, 10);
            } else {
              throw new Error();
            }
          } catch (e) {
            that.countObj[type] = null;
          }

          that.countApply(type);
        }
      };
      xmlHttpReq.open('get', 'https://graph.facebook.com/?id=' + encodeURIComponent(url), true);
      xmlHttpReq.send(null);
    }
  }, {
    key: 'countHatena',
    value: function countHatena(url) {

      var type = 'hatena';
      var that = this;

      (function () {

        var script = document.createElement('script');
        script.type = 'text/javascript';
        script.src = 'https://b.hatena.ne.jp/entry.count?url=' + encodeURIComponent(url) + '&callback=gameUsersShareButtonsCallbackHatena';
        window.gameUsersShareButtonsCallbackHatena = function (countJsonObj) {

          try {
            if (countJsonObj !== null) {
              that.countObj[type] = parseInt(countJsonObj, 10);
            } else {
              throw new Error();
            }
          } catch (e) {
            that.countObj[type] = null;
          }

          that.countApply(type);
        };
        document.body.appendChild(script);
      })();
    }
  }, {
    key: 'countPocket',
    value: function countPocket(url) {

      var type = 'pocket';
      var that = this;

      if (this.optionJsonObj.php) {

        var xmlHttpReq = new XMLHttpRequest();
        xmlHttpReq.onreadystatechange = function () {
          if (xmlHttpReq.readyState === 4 && xmlHttpReq.status === 200) {
            var countJsonObj = JSON.parse(this.responseText);

            try {
              if (countJsonObj.count !== null) {
                that.countObj[type] = parseInt(countJsonObj.count, 10);
              } else {
                throw new Error();
              }
            } catch (e) {
              that.countObj[type] = null;
            }

            that.countApply(type);
          }
        };
        xmlHttpReq.open('get', this.shareButtonsBaseUrl + 'php/count.php?type=' + type + '&url=' + encodeURIComponent(url), true);
        xmlHttpReq.send(null);
      }
    }
  }, {
    key: 'countPinterest',
    value: function countPinterest(url) {

      var type = 'pinterest';
      var that = this;

      (function () {

        var script = document.createElement('script');
        script.type = 'text/javascript';
        script.src = 'https://api.pinterest.com/v1/urls/count.json?url=' + encodeURIComponent(url) + '&callback=gameUsersShareButtonsCallbackPinterest';
        window.gameUsersShareButtonsCallbackPinterest = function (countJsonObj) {

          try {
            if (countJsonObj.count !== null) {
              that.countObj[type] = parseInt(countJsonObj.count, 10);
            } else {
              throw new Error();
            }
          } catch (e) {
            that.countObj[type] = null;
          }

          that.countApply(type);
        };
        document.body.appendChild(script);
      })();
    }
  }, {
    key: 'countLinkedIn',
    value: function countLinkedIn(url) {

      var type = 'linkedin';
      var that = this;

      (function () {

        var script = document.createElement('script');
        script.type = 'text/javascript';
        script.src = 'https://www.linkedin.com/countserv/count/share?url=' + encodeURIComponent(url) + '&callback=gameUsersShareButtonsCallbackLinkedIn';
        window.gameUsersShareButtonsCallbackLinkedIn = function (countJsonObj) {

          try {
            if (countJsonObj.count !== null) {
              that.countObj[type] = parseInt(countJsonObj.count, 10);
            } else {
              throw new Error();
            }
          } catch (e) {
            that.countObj[type] = null;
          }

          that.countApply(type);
        };
        document.body.appendChild(script);
      })();
    }
  }, {
    key: 'countFeedly',
    value: function countFeedly(url) {

      var type = 'feedly';
      var that = this;

      if (!url) {
        return;
      }

      if (this.optionJsonObj.php) {

        var xmlHttpReq = new XMLHttpRequest();
        xmlHttpReq.onreadystatechange = function () {
          if (xmlHttpReq.readyState === 4 && xmlHttpReq.status === 200) {
            var countJsonObj = JSON.parse(this.responseText);

            try {
              if (countJsonObj.count !== null) {
                that.countObj[type] = parseInt(countJsonObj.count, 10);
              } else {
                throw new Error();
              }
            } catch (e) {
              that.countObj[type] = null;
            }

            that.countApply(type);
          }
        };
        xmlHttpReq.open('get', this.shareButtonsBaseUrl + 'php/count.php?type=' + type + '&url=' + encodeURIComponent(url), true);
        xmlHttpReq.send(null);
      }
    }
  }, {
    key: 'count',
    value: function count() {
      var _this4 = this;

      var url = window.location.href;
      // const url = 'https://www.yahoo.co.jp/';
      // const url = 'https://www.google.com/';

      // console.log('this.countObj = ', this.countObj);


      Object.keys(this.countObj).forEach(function (key) {
        if (key === 'twitter') {
          _this4.countTwitter(url);
        } else if (key === 'facebook') {
          _this4.countFacebook(url);
        } else if (key === 'hatena') {
          _this4.countHatena(url);
        } else if (key === 'pocket') {
          _this4.countPocket(url);
        } else if (key === 'pinterest') {
          _this4.countPinterest(url);
        } else if (key === 'linkedin') {
          _this4.countLinkedIn(url);
        } else if (key === 'feedly') {
          _this4.countFeedly(_this4.optionJsonObj.rssUrl);
        }
      });
    }
  }], [{
    key: 'styleAddPx',
    value: function styleAddPx(argument) {
      var value = null;

      if (argument > 0) {
        value = argument + 'px';
      } else {
        value = '0';
      }

      return GameUsersShareButtonsCommon.escapeHtml(value);
    }
  }, {
    key: 'styleAddPxPlus',
    value: function styleAddPxPlus(argumentValue, argumentStyle) {
      var value = null;

      if (argumentValue === null) {
        value = '';
      } else if (argumentValue > 0) {
        value = argumentStyle + ': ' + argumentValue + 'px;';
      } else {
        value = argumentStyle + ': 0;';
      }

      return GameUsersShareButtonsCommon.escapeHtml(value);
    }
  }, {
    key: 'styleVerticalAlign',
    value: function styleVerticalAlign(argument) {
      var value = '';

      if (argument === 'top') {

        value += '-webkit-box-align: start;';
        value += '-ms-flex-align: start;';
        value += 'align-items: flex-start;';
      } else if (argument === 'middle') {

        value += '-webkit-box-align: center;';
        value += '-ms-flex-align: center;';
        value += 'align-items: center;';
      } else {

        value += '-webkit-box-align: end;';
        value += '-ms-flex-align: end;';
        value += 'align-items: flex-end;';
      }

      return GameUsersShareButtonsCommon.escapeHtml(value);
    }
  }]);

  return GameUsersShareButtons;
}();

window.onload = function () {

  // --------------------------------------------------
  //   シェアボタンを描写する
  //
  //   シェアボタンを描写する場所は3種類ある
  //   1. 通常の使用（ブログの記事ページやコードを貼ったページなど）
  //   2. 公式ページのシェアボタン作成タブ
  //   3. WordPress プラグインのシェアボタン作成タブ
  //
  //   このうちの 2 & 3 のシェアボタン作成タブの場合、ここでは描写しない
  //   1 の通常使用時と公式ページの左メニュー部分のシェアボタンはこちらから描写する
  //   gameUsersShareButtonsPageType が存在しない場合、作成タブではないという判定
  // --------------------------------------------------

  if (typeof gameUsersShareButtonsPageType === 'undefined') {
    var instanceGameUsersShareButtons = new GameUsersShareButtons();
    instanceGameUsersShareButtons.renderAllShareButtons();
  }
};

// --------------------------------------------------
//   IE で Array.from のエラーが出るので Polyfill を直書きしてエラー回避
//   https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/from
// --------------------------------------------------

/* eslint no-var: 0, no-restricted-properties: 0, no-restricted-globals: 0, vars-on-top: 0, prefer-rest-params: 0, no-void: 0, prefer-destructuring: 0 */

// Production steps of ECMA-262, Edition 6, 22.1.2.1
if (!Array.from) {
  Array.from = function () {
    var toStr = Object.prototype.toString;
    var isCallable = function isCallable(fn) {
      return typeof fn === 'function' || toStr.call(fn) === '[object Function]';
    };
    var toInteger = function toInteger(value) {
      var number = Number(value);
      if (isNaN(number)) {
        return 0;
      }
      if (number === 0 || !isFinite(number)) {
        return number;
      }
      return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));
    };
    var maxSafeInteger = Math.pow(2, 53) - 1;
    var toLength = function toLength(value) {
      var len = toInteger(value);
      return Math.min(Math.max(len, 0), maxSafeInteger);
    };

    // The length property of the from method is 1.
    return function from(arrayLike /* , mapFn, thisArg */) {
      // 1. Let C be the this value.
      var C = this;

      // 2. Let items be ToObject(arrayLike).
      var items = Object(arrayLike);

      // 3. ReturnIfAbrupt(items).
      if (arrayLike == null) {
        throw new TypeError('Array.from requires an array-like object - not null or undefined');
      }

      // 4. If mapfn is undefined, then let mapping be false.
      var mapFn = arguments.length > 1 ? arguments[1] : void undefined;
      var T;
      if (typeof mapFn !== 'undefined') {
        // 5. else
        // 5. a If IsCallable(mapfn) is false, throw a TypeError exception.
        if (!isCallable(mapFn)) {
          throw new TypeError('Array.from: when provided, the second argument must be a function');
        }

        // 5. b. If thisArg was supplied, let T be thisArg; else let T be undefined.
        if (arguments.length > 2) {
          T = arguments[2];
        }
      }

      // 10. Let lenValue be Get(items, "length").
      // 11. Let len be ToLength(lenValue).
      var len = toLength(items.length);

      // 13. If IsConstructor(C) is true, then
      // 13. a. Let A be the result of calling the [[Construct]] internal method of C with an argument list containing the single item len.
      // 14. a. Else, Let A be ArrayCreate(len).
      var A = isCallable(C) ? Object(new C(len)) : new Array(len);

      // 16. Let k be 0.
      var k = 0;
      // 17. Repeat, while k < len… (also steps a - h)
      var kValue;
      while (k < len) {
        kValue = items[k];
        if (mapFn) {
          A[k] = typeof T === 'undefined' ? mapFn(kValue, k) : mapFn.call(T, kValue, k);
        } else {
          A[k] = kValue;
        }
        k += 1;
      }
      // 18. Let putStatus be Put(A, "length", len, true).
      A.length = len;
      // 20. Return A.
      return A;
    };
  }();
}

/***/ }),

/***/ 80:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
/**
 * アクセスしたデバイスの種類とOSを返す
 * @return {object} デバイスとOS
 */
var getDeviceAndOs = exports.getDeviceAndOs = function getDeviceAndOs() {

  var ua = navigator.userAgent;

  var returnObj = {};

  returnObj.device = 'other';
  returnObj.os = 'other';

  if (ua.indexOf('iPhone') > 0 || ua.indexOf('iPod') > 0) {

    returnObj.device = 'smartphone';
    returnObj.os = 'iOS';
  } else if (ua.indexOf('Android') > 0 && ua.indexOf('Mobile') > 0) {

    returnObj.device = 'smartphone';
    returnObj.os = 'Android';
  } else if (ua.indexOf('Windows Phone') > 0) {

    returnObj.device = 'smartphone';
    returnObj.os = 'Windows';
  } else if (ua.indexOf('iPad') > 0) {

    returnObj.device = 'tablet';
    returnObj.os = 'iOS';
  } else if (ua.indexOf('Android') > 0) {

    returnObj.device = 'tablet';
    returnObj.os = 'Android';
  }

  return returnObj;
};

exports.default = getDeviceAndOs;

/***/ })

/******/ });
//# sourceMappingURL=share-bundle.min.js.map